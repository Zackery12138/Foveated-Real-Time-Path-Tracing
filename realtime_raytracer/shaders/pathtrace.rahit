
#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "globals.glsl"
#include "layouts.glsl"
#include "random.glsl"


hitAttributeEXT vec2 bary;

// Payloads
layout(location = 0) rayPayloadInEXT PtPayload prd;

// Push Constant
layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


void main()
{
  // Retrieve the Primitive mesh buffer information
  InstanceData      pinfo    = geoInfo[gl_InstanceCustomIndexEXT];
  const uint        matIndex = max(0, pinfo.materialIndex);  // material of primitive mesh
  GltfShadeMaterial mat      = materials[matIndex];

  float baseColorAlpha = mat.pbrBaseColorFactor.a;
  if(mat.pbrBaseColorTexture > -1)
  {
    // Primitive buffer addresses
    Indices  indices  = Indices(pinfo.indexAddress);
    Vertices vertices = Vertices(pinfo.vertexAddress);

    // Indices of this triangle primitive.
    uvec3 tri = indices.i[gl_PrimitiveID];

    // All vertex attributes of the triangle.
    VertexAttributes attr0 = vertices.v[tri.x];
    VertexAttributes attr1 = vertices.v[tri.y];
    VertexAttributes attr2 = vertices.v[tri.z];

    // Get the texture coordinate
    const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);
    const vec2 uv0          = attr0.texcoord;
    const vec2 uv1          = attr1.texcoord;
    const vec2 uv2          = attr2.texcoord;
    vec2       texcoord0    = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

    // Uv Transform
    texcoord0 = (vec4(texcoord0.xy, 1, 1) * mat.uvTransform).xy;

    baseColorAlpha *= texture(texturesMap[nonuniformEXT(mat.pbrBaseColorTexture)], texcoord0).a;
  }

  float opacity;
  if(mat.alphaMode == ALPHA_MASK)
  {
    opacity = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
  }
  else
  {
    opacity = baseColorAlpha;
  }

  // Do alpha blending the stochastically way
  if(rand(prd.seed) > opacity)
    ignoreIntersectionEXT;
}
