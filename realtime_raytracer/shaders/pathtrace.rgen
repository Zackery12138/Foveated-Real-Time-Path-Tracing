#version 460
#extension GL_GOOGLE_include_directive : enable         // To be able to use #include
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_KHR_shader_subgroup_basic : require       // Special extensions to debug groups, warps, SM, ...
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_scalar_block_layout : enable          // Usage of 'scalar' block layout

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

#include "globals.glsl"
#include "layouts.glsl"

layout(location = 0) rayPayloadEXT PtPayload prd;
layout(location = 1) rayPayloadEXT ShadowHitPayload shadow_payload;


layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};



#include "pathtrace.glsl"
#include "random.glsl"
#include "common.glsl"

const float foveaRadius = 0.05f;

// random function for foveated raytracing decision
float random(vec2 st) {
    vec3 scale = vec3(12.9898 , 78.233 , 151.7182);
    return fract(sin(dot(st.xy, scale.xy)) * scale.z);
}


void main()
{

    ivec2 imageRes    = ivec2(gl_LaunchSizeEXT.xy);
    ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);

    float aspectRatio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
   
    vec2 centeredCoords = vec2(imageCoords) / vec2(imageRes) - vec2(0.5f);
    vec2 relCoords = vec2(centeredCoords.x, centeredCoords.y / aspectRatio);
    float distanceFromCenter = length(relCoords);

    //Define probability based on distance from fovea area
    float probability = distanceFromCenter - foveaRadius > 0 ? 
    (1.0 - distanceFromCenter) * (1.0f - distanceFromCenter) : 1.0f;

    
    // Random seed for foveated raytracing decision
    float rnd2 = random(imageCoords);

    // Initialize the seed for the random number
    prd.seed = initRandom(imageRes, imageCoords, rtxState.frame);

    int frameInterval = 1;
    if(distanceFromCenter > 0.05 && distanceFromCenter < 0.15) frameInterval = 2;
    else if(distanceFromCenter >= 0.15 && distanceFromCenter < 0.3) frameInterval = 3;
    else if(distanceFromCenter >= 0.3) frameInterval = 4;

    
    if(rtxState.enableFoveation == 1)
    {
        if(rtxState.frame % frameInterval == 0)
        {
            if(rand(prd.seed) <= probability)
            //if(rnd2 <= probability)
            {
                // Initialize the seed for the random number
                prd.seed = initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, rtxState.frame);

                vec3 pixelColor = vec3(0);
                for(int smpl = 0; smpl < rtxState.maxSamples; ++smpl)
                {
                    pixelColor += samplePixel(imageCoords, imageRes); 
                }

                pixelColor /= rtxState.maxSamples;

                // Do accumulation over time
                if(rtxState.frame > 0)
                {
                    vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
                    vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));

                    imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
                }
                else
                {
                    // First frame, replace the value in the buffer
                    imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));
                }

            } 
        } 
        else
        {
            if(rtxState.enablePeripheryBlur == 1)
            {
                //if(rtxState.frame >= 400 && rtxState.frame <= 500)
                //{
                    vec3 backgroundColor = vec3(0);
                    int count = 0;
                    for(int dx = -1; dx <= 1; dx++) {
                        for(int dy = -1; dy <= 1; dy++) {
                            ivec2 neighbourCoords = imageCoords + ivec2(dx, dy);
                            if(neighbourCoords.x >= 0 && neighbourCoords.x < imageRes.x &&
                                neighbourCoords.y >= 0 && neighbourCoords.y < imageRes.y) {
                                backgroundColor += imageLoad(resultImage, neighbourCoords).xyz;
                                count++;
                            }
                        }
                    }
                    //average neighbour color
                    backgroundColor /= count; 
                    imageStore(resultImage, imageCoords, vec4(backgroundColor, 1.f));
                //}
                   
            } 
        }
    }


    else
    {
        // Initialize the seed for the random number
        prd.seed = initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, rtxState.frame);

        vec3 pixelColor = vec3(0);
        for(int smpl = 0; smpl < rtxState.maxSamples; ++smpl)
        {
            pixelColor += samplePixel(imageCoords, imageRes);  
        }

        pixelColor /= rtxState.maxSamples;

        // Do accumulation over time
        if(rtxState.frame > 0)
        {
            vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
            vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));

            imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
        }
        else
        {
            // First frame, replace the value in the buffer
            imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));
        }
    }
  
}
